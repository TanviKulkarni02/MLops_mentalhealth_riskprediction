pipeline {
    agent any

    environment {
        VAULT_ADDR = 'http://127.0.0.1:8200'                // Vault address
        VAULT_TOKEN = credentials('vault-token')            // Jenkins credential ID for Vault token

        // These will be populated in Fetch Secrets stage
        DOCKER_USERNAME = ''
        DOCKER_PASSWORD = ''

        BACKEND_SERVICE = 'mental-health-backend'
        FRONTEND_SERVICE = 'mental-health-frontend'
        BACKEND_PORT = '5001'
        FRONTEND_PORT = '5003'
        K8S_NAMESPACE = 'default'
        ANSIBLE_PLAYBOOK_PATH = 'ansible/playbook.yml'
        KUBECONFIG = '/var/lib/jenkins/.kube/config'
    }

    stages {
        stage('Checkout') {
            steps {
                git(
                    url: 'https://github.com/TanviKulkarni02/MLops_mentalhealth_riskprediction.git',
                    branch: 'main',
                    changelog: false,
                    poll: false
                )
            }
        }

        stage('Fetch Secrets from Vault') {
            steps {
                script {
                    env.DOCKER_USERNAME = sh(
                        script: "vault kv get -field=username kv/mental-health/docker",
                        returnStdout: true
                    ).trim()

                    env.DOCKER_PASSWORD = sh(
                        script: "vault kv get -field=password kv/mental-health/docker",
                        returnStdout: true
                    ).trim()
                }
            }
        }

        stage('Docker Login') {
            steps {
                script {
                    sh """
                        echo "$DOCKER_PASSWORD" | docker login \
                        -u "$DOCKER_USERNAME" \
                        --password-stdin
                    """
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    sh """
                        docker build -t ${DOCKER_USERNAME}/${BACKEND_SERVICE}:${env.BUILD_ID} -f backend/Dockerfile backend/
                    """
                    sh """
                        docker build -t ${DOCKER_USERNAME}/${FRONTEND_SERVICE}:${env.BUILD_ID} -f frontend/Dockerfile frontend/
                    """
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    sh "docker push ${DOCKER_USERNAME}/${BACKEND_SERVICE}:${env.BUILD_ID}"
                    sh "docker push ${DOCKER_USERNAME}/${FRONTEND_SERVICE}:${env.BUILD_ID}"
                }
            }
        }

        stage('Debug Workspace') {
            steps {
                script {
                    echo "Current workspace: ${WORKSPACE}"
                    sh "ls -R ${WORKSPACE}"
                }
            }
        }

        stage('Deploy with Ansible') {
            steps {
                script {
                    sh """
                        ansible-playbook -i ${WORKSPACE}/ansible/inventory.ini ${WORKSPACE}/ansible/playbook.yml
                    """
                }
            }
        }

        stage('Verify Backend Health') {
            steps {
                script {
                    sh """
                        curl --retry 10 --retry-delay 5 http://localhost:${BACKEND_PORT}/health || exit 1
                    """
                }
            }
        }

        stage('Verify Frontend Availability') {
            steps {
                script {
                    sh """
                        curl --retry 10 --retry-delay 5 http://localhost:${FRONTEND_PORT} || exit 1
                    """
                }
            }
        }
    }

    post {
        always {
            sh 'docker logout || true'
            cleanWs()
        }
        success {
            slackSend(
                color: 'good',
                message: """Deployment Successful!
                |Backend API: http://your-server:${BACKEND_PORT}
                |Frontend App: http://your-server:${FRONTEND_PORT}
                |Build Log: ${env.BUILD_URL}""".stripMargin()
            )
        }
        failure {
            slackSend(
                color: 'danger',
                message: """Deployment Failed!
                |Check logs: ${env.BUILD_URL}""".stripMargin()
            )
        }
    }
}
